{"version":3,"sources":["component/NavBar.js","component/Text.js","component/Alert.js","component/About.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","React","createElement","className","mode","Link","to","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","home","about","onClick","toggleMode","role","htmlFor","Text","text","setText","useState","from","setFrom","setTo","Fragment","style","backgroundColor","width","color","header","value","onChange","event","target","row","handleToUpper","newText","toUpperCase","showAlert","handleToLower","toLowerCase","convert","binary","i","length","ch","charCodeAt","Math","floor","str","split","reverse","join","padStart","trim","hexText","toString","deciText","octText","size","decimal","binaryElement","substring","max","parseInt","String","fromCharCode","hexElement","dec","txt","bi","octalHexText","decimalText","decArray","binaryDecText","decArrayToBinary","hexDecText","decArrayToHex","octDecText","decArrayToOct","Alert","alert","class","msg","data-bs-dismiss","About","data-bs-parent","defaultProps","App","setmode","setAlert","message","ty","setTimeout","document","body","Router","Routes","Route","exact","path","element","toggleMod","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a2052dd7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function NavBar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">Navbar</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.home}</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavBar.propTypes = {\r\n  home: PropTypes.string,\r\n  about: PropTypes.string,\r\n\r\n}\r\n\r\nNavBar.defaultProps =\r\n{\r\n  home: \"home\",\r\n  about: \"about\"\r\n};\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function Text(props) {\r\n    const [text, setText] = useState(\"Enter the text\");\r\n    const [from, setFrom] = useState(\"text\");\r\n    const [to, setTo] = useState(\"text\");\r\n\r\n    const handleToUpper = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('UpperCase Converted','success');\r\n    }\r\n    const handleToLower = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const onChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const handleFrom = (event) => {\r\n        setFrom(event.target.value);\r\n    }\r\n    const handleTo = (event) => {\r\n        setTo(event.target.value);\r\n    }\r\n    const convert = () => {\r\n        switch (from) {\r\n            case 'text':\r\n                switch (to) {\r\n                    case 'text':\r\n                        break;\r\n                    case 'binary':\r\n                        let newText = '';\r\n                        let binary = '';\r\n                        for (let i = 0; i < text.length; i++) {\r\n\r\n\r\n                            let ch = text.charCodeAt(i);//104\r\n                            while (ch > 0) {\r\n                                if (ch % 2 === 1) {\r\n                                    newText += '1';\r\n                                }\r\n                                else {\r\n                                    newText += '0';\r\n                                }\r\n                                ch = Math.floor(ch / 2);\r\n                            }\r\n\r\n                            let str = newText.split('').reverse().join('').padStart(8, '0');\r\n                            newText = '';\r\n                            binary = binary + str;\r\n\r\n                        }\r\n\r\n                        setText(binary.trim());\r\n                        break;\r\n                    case 'hexadecimal':\r\n                        let hexText = '';\r\n                        for (let i = 0; i < text.length; i++) {\r\n                            hexText += text.charCodeAt(i).toString(16).padStart(2, '0') + ' ';\r\n                        }\r\n                        setText(hexText);\r\n                        break;\r\n                    case 'decimal':\r\n                        let deciText = '';\r\n                        for (let i = 0; i < text.length; i++) {\r\n                            deciText += text.charCodeAt(i).toString() + ' ';\r\n                        }\r\n                        setText(deciText);\r\n                        break;\r\n                    case 'octal':\r\n                        let octText = '';\r\n                        for (let i = 0; i < text.length; i++) {\r\n                            octText += text.charCodeAt(i).toString(8) + ' ';\r\n                        }\r\n                        setText(octText);\r\n                        break;\r\n                    default:\r\n                        break;\r\n\r\n                }\r\n                break;\r\n            case 'binary':\r\n                switch (to) {\r\n                    case 'text':\r\n                        let binary = '';\r\n                        let size = 8;\r\n                        for (let i = text.length; i > 0; i = i - size) {\r\n                            let decimal = 0;\r\n                            let binaryElement = text.substring(Math.max(0, i - size), i);\r\n                            decimal = parseInt(binaryElement, 2);\r\n                            let ch = String.fromCharCode(decimal);\r\n                            binary += ch;\r\n                        }\r\n\r\n                        setText(binary.split('').reverse().join(''));\r\n                        break;\r\n                    case 'binary':\r\n                        break;\r\n                    case 'hexadecimal':\r\n                        let hexText = '';\r\n                        for (let i = text.length; i > 0; i = i - 8) {\r\n                            let decimal = 0;\r\n                            let binaryElement = text.substring(Math.max(0, i - 8), i);\r\n                            decimal = parseInt(binaryElement, 2);\r\n                            hexText = decimal.toString(16) + ' ' + hexText;\r\n                        }\r\n                        setText(hexText.trim());\r\n                        break;\r\n                    case 'decimal':\r\n                        let deciText = '';\r\n                        for (let i = text.length - 1; i > 0; i = i - 8) {\r\n                            let decimal = 0;\r\n                            let binaryElement = text.substring(Math.max(0, i - 8), i);\r\n                            decimal = parseInt(binaryElement, 2);\r\n                            deciText = decimal.toString() + ' ' + deciText;\r\n                        }\r\n                        setText(deciText);\r\n                        break;\r\n                    case 'octal':\r\n                        let octText = '';\r\n                        for (let i = text.length - 1; i > 0; i = i - 8) {\r\n                            let decimal = 0;\r\n                            let binaryElement = text.substring(Math.max(0, i - 8), i);\r\n                            decimal = parseInt(binaryElement, 2);\r\n                            octText = decimal.toString(8) + ' ' + octText;\r\n                        }\r\n                        setText(octText);\r\n                        break;\r\n                    default:\r\n                        break;\r\n\r\n                }\r\n                break;\r\n            case 'hexadecimal':\r\n                switch (to) {\r\n                    case 'text':\r\n                        let hexText = '';\r\n                        for (let i = 0; i < text.length; i += 2) {\r\n                            let hexElement = text.substring(i, i + 2);\r\n                            let decimal = parseInt(hexElement, 16);\r\n                            hexText += String.fromCharCode(decimal);\r\n                        }\r\n                        setText(hexText);\r\n                        break;\r\n                    case 'decimal':\r\n                        let dec=0;\r\n                        let txt=text;\r\n                        dec=parseInt(txt,16);\r\n                        setText(dec.toString());\r\n                        break;\r\n                    case 'binary':\r\n                        let bi=0;\r\n                        dec=parseInt(txt,16);\r\n                        setText(bi.toString(2));\r\n                        break;\r\n                    case 'octal':\r\n                        let octalHexText = '';\r\n                        for (let i = 0; i < text.length; i += 2) {\r\n                        let hexElement = text.substring(i, i + 2);\r\n                        let decimal = parseInt(hexElement, 16);\r\n                        octalHexText += decimal.toString(8) + ' ';\r\n                    }\r\n                    setText(octalHexText.trim());\r\n                    break;\r\n                    default:\r\n                        break;\r\n                }\r\n                break;\r\n            case 'decimal':\r\n                switch (to) {\r\n                    case 'text':\r\n                        let decimalText = '';\r\n                        let decArray = text.split(' ');\r\n                        for (let i = 0; i < decArray.length; i++) {\r\n                            let decimal = parseInt(decArray[i], 10);\r\n                            decimalText += String.fromCharCode(decimal);\r\n                        }\r\n                        setText(decimalText);\r\n                        break;\r\n                    case 'binary':\r\n                        let binaryDecText = '';\r\n                        let decArrayToBinary = text.split(' ');\r\n                        for (let i = 0; i < decArrayToBinary.length; i++) {\r\n                            let decimal = parseInt(decArrayToBinary[i], 10);\r\n                            binaryDecText += decimal.toString(2).padStart(8, '0') + ' ';\r\n                        }\r\n                        setText(binaryDecText.trim());\r\n                        break;\r\n                    case 'decimal':\r\n                        break;\r\n                    case 'hexadecimal':\r\n                        let hexDecText = '';\r\n                        let decArrayToHex = text.split(' ');\r\n                        for (let i = 0; i < decArrayToHex.length; i++) {\r\n                            let decimal = parseInt(decArrayToHex[i], 10);\r\n                            hexDecText += decimal.toString(16) + ' ';\r\n                        }\r\n                        setText(hexDecText.trim());\r\n                        break;\r\n                    case 'octal':\r\n                        let octDecText = '';\r\n                        let decArrayToOct = text.split(' ');\r\n                        for (let i = 0; i < decArrayToOct.length; i++) {\r\n                            let decimal = parseInt(decArrayToOct[i], 10);\r\n                            octDecText += decimal.toString(8) + ' ';\r\n                        }\r\n                        setText(octDecText.trim());\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n        <>\r\n            <div className=\"container\" style={{backgroundColor :props.mode==='dark'?'#355c84':'white',width: '100%',color:props.mode==='dark'?'white':'black'}}> \r\n                <h1>{props.header}</h1>\r\n                <div className='navbar' style={{backgroundColor :props.mode==='dark'?'#355c84':'white'}}>\r\n                    <label htmlFor=\"from-#355c84\" className=\"form-label\">From</label>\r\n                    <select className=\"form-select\" id=\"from\" style={{backgroundColor:'#7db1e5'}} value={from} onChange={handleFrom}>\r\n                        <option value=\"text\">Text</option>\r\n                        <option value=\"binary\">Binary</option>\r\n                        <option value=\"hexadecimal\">Hexadecimal</option>\r\n                        <option value=\"decimal\">Decimal</option>\r\n                        <option value=\"octal\">Octal</option>\r\n                    </select>\r\n\r\n                    <label htmlFor=\"to\" className=\"form-label\" >To</label>\r\n                    <select className=\"form-select\" id=\"to\" style={{backgroundColor: '#7db1e5'}} value={to} onChange={handleTo}>\r\n                        <option value=\"text\">Text</option>\r\n                        <option value=\"binary\">Binary</option>\r\n                        <option value=\"hexadecimal\">Hexadecimal</option>\r\n                        <option value=\"decimal\">Decimal</option>\r\n                        <option value=\"octal\">Octal</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"mb-3\" >\r\n                    <textarea className=\"form-control\" value={text} onChange={onChange} id=\"myBox\" row=\"8\" style={{backgroundColor : props.mode==='dark'?'#355c84':'white',color:props.mode==='dark'?'white':'black'}} ></textarea>\r\n                </div>\r\n                <button className='btn btn-primary mx-2' onClick={handleToUpper}>convert to upper case</button>\r\n                <button className='btn btn-primary mx-2' onClick={handleToLower}>convert to lowerCase</button>\r\n                <button className='btn btn-primary mx-2' onClick={convert}>convert</button>\r\n            </div>\r\n            <div className='container my-3' style={{backgroundColor : props.mode==='dark'?'#355c84':'white',color:props.mode==='dark'?'white':'black'}} >\r\n                <h2>Text Summary</h2>\r\n                <p>{text.split(\" \").length}</p>\r\n                <p>{text.length}</p>\r\n                <p>Text read in {0.0008 * text.length}</p>\r\n                <h2>Preview</h2>\r\n                <p>{text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n       props.alert && <div>\r\n            <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    return (\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\" style={{backgroundColor:props.mode==='dark'?\"white\":\"grey\",color:props.mode===\"dark\"?\"grey\":\"white\"}}>\r\n          <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={{backgroundColor:props.mode==='dark'?\"white\":\"grey\",color:props.mode===\"dark\"?\"grey\":\"white\"}}>\r\n          <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={{backgroundColor:props.mode==='dark'?\"white\":\"grey\",color:props.mode===\"dark\"?\"grey\":\"white\"}}>\r\n          <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React, { useState } from 'react';\nimport './App.css';\nimport NavBar from './component/NavBar';\nimport Text from './component/Text';\nimport Alert from './component/Alert';\nimport About from './component/About';\nimport {\n  BrowserRouter as Router,Routes, Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, ty) => {\n    setAlert({\n      msg: message,\n      type: ty\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000)\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = '#355c84';\n      showAlert(\"dark mode enable \", \"success\");\n    }\n    else {\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode enable \", \"success\");\n    }\n  }\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar home=\"welcome Home\" about=\"know more about us\" mode={mode} toggleMode={toggleMode} />\n        <div className='container'>\n          <Alert alert={alert} />\n          <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode} toggleMode={toggleMode}/>}/>\n            <Route exact path=\"/\" element={<Text showAlert={showAlert} header=\"Enter box\" mode={mode} toggleMod={toggleMode} />}/>\n          </Routes>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}